name: Create Release

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: UEProjectUtility-Linux
          - os: windows-latest
            asset_name: UEProjectUtility-Windows
          - os: macos-latest
            asset_name: UEProjectUtility-Mac
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: 'termcolor'
          vcpkgDirectory: '${{ runner.workspace }}/vcpkg/'
          vcpkgGitCommitId: '51475feaccb720ab40e5a0e3f8da70a4510defc0'
          appendedCacheKey: ${{ matrix.os }}

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build . --config Release

      - name: Archive
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            7z a ${{ matrix.asset_name }}.zip ./build/*
          } elseif ($env:RUNNER_OS -eq "Linux" -or $env:RUNNER_OS -eq "macOS") {
            zip -r ${{ matrix.asset_name }}.zip build/
          }
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.asset_name }}.zip
          path: ${{ matrix.asset_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Get latest release version
        id: latest_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .name | grep -oP 'v\K\d+\.\d+')
          echo "::set-output name=version::v$(echo "$LATEST_VERSION + 0.1" | bc)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit messages
        id: get_commits
        run: |
          COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")
          echo "::set-output name=commits::$COMMITS"

      - name: Create Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: UEProjectUtility ${{ steps.latest_version.outputs.version }}
          body: ${{ steps.get_commits.outputs.commits }}

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./UEProjectUtility-Windows.zip
          asset_name: UEProjectUtility-Windows-${{ steps.latest_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Mac)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./UEProjectUtility-Mac.zip
          asset_name: UEProjectUtility-Mac-${{ steps.latest_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./UEProjectUtility-Linux.zip
          asset_name: UEProjectUtility-Linux-${{ steps.latest_version.outputs.version }}.zip
          asset_content_type: application/zip
